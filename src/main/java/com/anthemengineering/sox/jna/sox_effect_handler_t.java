/*
 *  Copyright 2019 Anthem Engineering LLC.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.anthemengineering.sox.jna;

import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_drain;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_flow;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_getopts;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Client API:<br>
 * Effect handler information.<br>
 * <i>native declaration : sox.h:1590</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings({"unused", "JavaDoc"})
public class sox_effect_handler_t extends Structure {
	/**
	 * Effect name<br>
	 * C type : const char*
	 */
	public Pointer name;
	/**
	 * Short explanation of parameters accepted by effect<br>
	 * C type : const char*
	 */
	public Pointer usage;
	/** Combination of SOX_EFF_* flags */
	public int flags;
	/**
	 * Called to parse command-line arguments (called once per effect).<br>
	 * C type : sox_effect_handler_getopts
	 */
	public sox_effect_handler_getopts getopts;
	/**
	 * Called to initialize effect (called once per flow).<br>
	 * C type : sox_effect_handler
	 */
	public sox_effect_handler start;
	/**
	 * Called to process samples.<br>
	 * C type : sox_effect_handler_flow
	 */
	public sox_effect_handler_flow flow;
	/**
	 * Called to finish getting output after input is complete.<br>
	 * C type : sox_effect_handler_drain
	 */
	public sox_effect_handler_drain drain;
	/**
	 * Called to shut down effect (called once per flow).<br>
	 * C type : sox_effect_handler_stop
	 */
	public sox_effect_handler stop;
	/**
	 * Called to shut down effect (called once per effect).<br>
	 * C type : sox_effect_handler_kill
	 */
	public sox_effect_handler kill;
	/** Size of private data SoX should pre-allocate for effect */
	public size_t priv_size;
	public sox_effect_handler_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "usage", "flags", "getopts", "start", "flow", "drain", "stop", "kill", "priv_size");
	}
	public sox_effect_handler_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sox_effect_handler_t implements Structure.ByReference {
		
	};
	public static class ByValue extends sox_effect_handler_t implements Structure.ByValue {
		
	};
}
