package com.anthemengineering.sox.jna;

import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_drain;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_flow;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_getopts;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_kill;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_start;
import com.anthemengineering.sox.jna.SoxLibrary.sox_effect_handler_stop;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Client API:<br>
 * Effect handler information.<br>
 * <i>native declaration : sox.h:1590</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sox_effect_handler_t extends Structure {
	/**
	 * < Effect name<br>
	 * C type : const char*
	 */
	public Pointer name;
	/**
	 * < Short explanation of parameters accepted by effect<br>
	 * C type : const char*
	 */
	public Pointer usage;
	/** < Combination of SOX_EFF_* flags */
	public int flags;
	/**
	 * < Called to parse command-line arguments (called once per effect).<br>
	 * C type : sox_effect_handler_getopts
	 */
	public sox_effect_handler_getopts getopts;
	/**
	 * < Called to initialize effect (called once per flow).<br>
	 * C type : sox_effect_handler_start
	 */
	public sox_effect_handler_start start;
	/**
	 * < Called to process samples.<br>
	 * C type : sox_effect_handler_flow
	 */
	public sox_effect_handler_flow flow;
	/**
	 * < Called to finish getting output after input is complete.<br>
	 * C type : sox_effect_handler_drain
	 */
	public sox_effect_handler_drain drain;
	/**
	 * < Called to shut down effect (called once per flow).<br>
	 * C type : sox_effect_handler_stop
	 */
	public sox_effect_handler_stop stop;
	/**
	 * < Called to shut down effect (called once per effect).<br>
	 * C type : sox_effect_handler_kill
	 */
	public sox_effect_handler_kill kill;
	/** < Size of private data SoX should pre-allocate for effect */
	public size_t priv_size;
	public sox_effect_handler_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("name", "usage", "flags", "getopts", "start", "flow", "drain", "stop", "kill", "priv_size");
	}
	public sox_effect_handler_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sox_effect_handler_t implements Structure.ByReference {
		
	};
	public static class ByValue extends sox_effect_handler_t implements Structure.ByValue {
		
	};
}
