package com.anthemengineering.sox.jna;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sox.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sox_oob_t extends Structure {
	/**
	 * < Comment strings in id=value format.<br>
	 * C type : sox_comments_t
	 */
	public PointerByReference comments;
	/**
	 * < Instrument specification<br>
	 * C type : sox_instrinfo_t
	 */
	public sox_instrinfo_t instr;
	/**
	 * < Looping specification<br>
	 * C type : sox_loopinfo_t[8]
	 */
	public sox_loopinfo_t[] loops = new sox_loopinfo_t[8];
	public sox_oob_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("comments", "instr", "loops");
	}
	/**
	 * @param comments < Comment strings in id=value format.<br>
	 * C type : sox_comments_t<br>
	 * @param instr < Instrument specification<br>
	 * C type : sox_instrinfo_t<br>
	 * @param loops < Looping specification<br>
	 * C type : sox_loopinfo_t[8]
	 */
	public sox_oob_t(PointerByReference comments, sox_instrinfo_t instr, sox_loopinfo_t loops[]) {
		super();
		this.comments = comments;
		this.instr = instr;
		if ((loops.length != this.loops.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.loops = loops;
	}
	public sox_oob_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sox_oob_t implements Structure.ByReference {
		
	};
	public static class ByValue extends sox_oob_t implements Structure.ByValue {
		
	};
}
