/*
 *  Copyright 2019 Anthem Engineering LLC.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.anthemengineering.sox.jna;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sox.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings({"unused", "JavaDoc"})
public class lsx_getopt_t extends Structure {
	/** IN    argc:      Number of arguments in argv */
	public int argc;
	/**
	 * IN    argv:      Array of arguments<br>
	 * C type : char**
	 */
	public PointerByReference argv;
	/**
	 * IN    shortopts: Short option characters<br>
	 * C type : const char*
	 */
	public Pointer shortopts;
	/**
	 * IN    longopts:  Array of long option descriptors<br>
	 * C type : const lsx_option_t*
	 */
	public com.anthemengineering.sox.jna.lsx_option_t.ByReference longopts;
	/**
	 * See lsx_getopt_flags
	 * IN    flags:     Flags for longonly and opterr<br>
	 * C type : lsx_getopt_flags_t
	 */
	public int flags;
	/**
	 * INOUT curpos:    Maintains state between calls to lsx_getopt<br>
	 * C type : const char*
	 */
	public Pointer curpos;
	/** INOUT optind:    Maintains the index of next element to be processed */
	public int ind;
	/** OUT   optopt:    Receives the option character that caused error */
	public int opt;
	/**
	 * OUT   optarg:    Receives the value of the option's argument<br>
	 * C type : const char*
	 */
	public Pointer arg;
	/** OUT   lngind:    Receives the index of the matched long option or -1 if not a long option */
	public int lngind;
	public lsx_getopt_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("argc", "argv", "shortopts", "longopts", "flags", "curpos", "ind", "opt", "arg", "lngind");
	}
	public lsx_getopt_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends lsx_getopt_t implements Structure.ByReference {
		
	};
	public static class ByValue extends lsx_getopt_t implements Structure.ByValue {
		
	};
}
