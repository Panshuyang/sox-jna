package com.anthemengineering.sox.jna;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sox.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings({"unused", "JavaDoc"})
public class sox_encodinginfo_t extends Structure {
	/**
	 * see sox_encoding_t<br>
	 * format of sample numbers<br>
	 * C type : sox_encoding_t
	 */
	public int encoding;
	/** 0 if unknown or variable; uncompressed value if lossless; compressed value if lossy */
	public int bits_per_sample;
	/** compression factor (where applicable) */
	public double compression;
	/**
	 * see sox_option_t<br>
	 * C type : sox_option_t
	 */
	public int reverse_bytes;
	/**
	 * see sox_option_t<br>
	 * C type : sox_option_t
	 */
	public int reverse_nibbles;
	/**
	 * see sox_option_t<br>
	 * C type : sox_option_t
	 */
	public int reverse_bits;
	/**
	 * see sox_bool<br>
	 * C type : sox_bool
	 */
	public int opposite_endian;
	public sox_encodinginfo_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("encoding", "bits_per_sample", "compression", "reverse_bytes", "reverse_nibbles", "reverse_bits", "opposite_endian");
	}
	/**
	 * @param encoding see sox_encoding_t<br>
	 * format of sample numbers<br>
	 * C type : sox_encoding_t<br>
	 * @param bits_per_sample 0 if unknown or variable; uncompressed value if lossless; compressed value if lossy<br>
	 * @param compression compression factor (where applicable)<br>
	 * @param reverse_bytes see sox_option_t<br>
	 * C type : sox_option_t<br>
	 * @param reverse_nibbles see sox_option_t<br>
	 * C type : sox_option_t<br>
	 * @param reverse_bits see sox_option_t<br>
	 * C type : sox_option_t<br>
	 * @param opposite_endian see sox_bool<br>
	 * C type : sox_bool
	 */
	public sox_encodinginfo_t(int encoding, int bits_per_sample, double compression, int reverse_bytes, int reverse_nibbles, int reverse_bits, int opposite_endian) {
		super();
		this.encoding = encoding;
		this.bits_per_sample = bits_per_sample;
		this.compression = compression;
		this.reverse_bytes = reverse_bytes;
		this.reverse_nibbles = reverse_nibbles;
		this.reverse_bits = reverse_bits;
		this.opposite_endian = opposite_endian;
	}
	public sox_encodinginfo_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sox_encodinginfo_t implements Structure.ByReference {
		
	};
	public static class ByValue extends sox_encodinginfo_t implements Structure.ByValue {
		
	};
}
