/*
 *  Copyright 2019 Anthem Engineering LLC.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.anthemengineering.sox.jna;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sox.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@SuppressWarnings({"unused", "JavaDoc"})
public class sox_instrinfo_t extends Structure {
	/** for unity pitch playback */
	public byte MIDInote;
	/** MIDI pitch-bend low range */
	public byte MIDIlow;
	/** MIDI pitch-bend high range */
	public byte MIDIhi;
	/** 0=no, 1=forward, 2=forward/back (see sox_loop_* values) */
	public byte loopmode;
	/** number of active loops (max SOX_MAX_NLOOPS). */
	public int nloops;
	public sox_instrinfo_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("MIDInote", "MIDIlow", "MIDIhi", "loopmode", "nloops");
	}
	/**
	 * @param MIDInote for unity pitch playback<br>
	 * @param MIDIlow MIDI pitch-bend low range<br>
	 * @param MIDIhi MIDI pitch-bend high range<br>
	 * @param loopmode 0=no, 1=forward, 2=forward/back (see sox_loop_* values)<br>
	 * @param nloops number of active loops (max SOX_MAX_NLOOPS).
	 */
	public sox_instrinfo_t(byte MIDInote, byte MIDIlow, byte MIDIhi, byte loopmode, int nloops) {
		super();
		this.MIDInote = MIDInote;
		this.MIDIlow = MIDIlow;
		this.MIDIhi = MIDIhi;
		this.loopmode = loopmode;
		this.nloops = nloops;
	}
	public sox_instrinfo_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sox_instrinfo_t implements Structure.ByReference {
		
	};
	public static class ByValue extends sox_instrinfo_t implements Structure.ByValue {
		
	};
}
