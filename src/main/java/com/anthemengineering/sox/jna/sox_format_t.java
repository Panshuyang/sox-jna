package com.anthemengineering.sox.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * Client API:<br>
 * Data passed to/from the format handler<br>
 * <i>native declaration : sox.h:1525</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class sox_format_t extends Structure {
	/**
	 * < File name<br>
	 * C type : char*
	 */
	public Pointer filename;
	/** C type : sox_signalinfo_t */
	public sox_signalinfo_t signal;
	/** C type : sox_encodinginfo_t */
	public sox_encodinginfo_t encoding;
	/**
	 * < Type of file, as determined by header inspection or libmagic.<br>
	 * C type : char*
	 */
	public Pointer filetype;
	/**
	 * < comments, instrument info, loop info (out-of-band data)<br>
	 * C type : sox_oob_t
	 */
	public sox_oob_t oob;
	/**
	 * @see sox_bool<br>
	 * < Can seek on this file<br>
	 * C type : sox_bool
	 */
	public int seekable;
	/** < Read or write mode ('r' or 'w') */
	public byte mode;
	/**
	 * < Samples * chans written to file<br>
	 * C type : sox_uint64_t
	 */
	public long olength;
	/**
	 * < Incremented if clipping occurs<br>
	 * C type : sox_uint64_t
	 */
	public long clips;
	/** < Failure error code */
	public int sox_errno;
	/**
	 * < Failure error text<br>
	 * C type : char[256]
	 */
	public byte[] sox_errstr = new byte[256];
	/**
	 * < File stream pointer<br>
	 * C type : void*
	 */
	public Pointer fp;
	/**
	 * @see lsx_io_type<br>
	 * < Stores whether this is a file, pipe or URL<br>
	 * C type : lsx_io_type
	 */
	public int io_type;
	/**
	 * < Current offset within file<br>
	 * C type : sox_uint64_t
	 */
	public long tell_off;
	/**
	 * < Offset at which headers end and sound data begins (set by lsx_check_read_params)<br>
	 * C type : sox_uint64_t
	 */
	public long data_start;
	/**
	 * < Format handler for this file<br>
	 * C type : sox_format_handler_t
	 */
	public sox_format_handler_t handler;
	/**
	 * < Format handler's private data area<br>
	 * C type : void*
	 */
	public Pointer priv;
	public sox_format_t() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("filename", "signal", "encoding", "filetype", "oob", "seekable", "mode", "olength", "clips", "sox_errno", "sox_errstr", "fp", "io_type", "tell_off", "data_start", "handler", "priv");
	}
	public sox_format_t(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends sox_format_t implements Structure.ByReference {
		
	};
	public static class ByValue extends sox_format_t implements Structure.ByValue {
		
	};
}
